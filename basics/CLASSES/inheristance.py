#принципы ООП
# НАСЛЕДОВАНИЕ,ИНКАПУЛЯЦИЯ, ПОЛИМОРФИЗМ, АБСТРАКЦИЯ, АССОЦИАЦИЯ
# Наследование = принцип ооп где мы можем в дочернем классе унаследовать прееопределять и использовать все атрибуты и методы родительского класса
from re import L


class A:
    def method(self):
        print('method in class A')

obj_a = A()
obj_a.method()

class B(A):
    '''унаследовали все методы и аттрибууты у класса А'''

obj_b = B()
obj_b.method()

# class A родительский
# class B дочерний

class C(A) :
    def method(self):
        print('method in class c')

obj_a = A()
obj_b = B()


# SUPER() = ФУНКЦИЯ КОТОРОЯ ПОзВОЛЯЕТ ОбРАТИТСЯ РОДИТЕЛЬСКОМУ КЛАССУ И вызвать определенныЕ МЕТОДЫ ИЛИ АТРИбуты
#                                                             KInd OF наслодеваний
# одиночное наследование
# множественное наследование
# многоуровневое наследование
# иерархическаое наследование
# гибридное наследоваnie

